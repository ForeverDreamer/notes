# 153. Setup a PublishSubscribe communication
# in terminal 1
subscribe ch1
# in terminal 2
subscribe ch1

# in terminal 3
publish ch1 msg1
publish ch1 msg2
publish ch1 msg3
publish ch1 msg4

* Install telnet
brew install telnet telnet
o telnet 6379


# 155. Patterned Subscription
# On Publishing side
publish news:tech "tech1"
publish news:biz "biz1"
publish news:tech "tech1"
publish news:tech "tech1"
publish news:politics "pol1"
publish news:biz "biz3"
publish topnews "top1"
publish topnews "top1"

# On Subscriber side
subscribe news:tech news:biz
ctrl + c
psubscribe news:*
ctrl + c
psubscribe news:* tech:*
ctrl + c
psubscribe news:* top*


# 157. Channel management via PUBSUB
publish news1 "news1"
publish news2 "news2"
publish topstocks "top1"
publish topstocks "top2"

subscribe news1

pubsub channels *
pubsub channels news*

subscribe new2

pubsub channels top*
pubsub channels news1

pubsub numsub news1


# 159. Unsubscribe from a channel or channels
UNSUBSCRIBE Channel Name

Unsubscribe channel name command will allow the client to unsubscribe to a particular channel. e.g. if you have a channel called news1 and you want to unsubscribe then you will run the following command;

> UNSUBSCRIBE news1

Please note that as you had seen from the earlier videos that, when you are running the SUBSCRIBE command from the redis-cli, the only option for you to unsubscribe from the client is to run CRTL -C to quit. However lets say if you are interacting with Redis with a programming language like Python etc., then you can unsubscribe from the client with the above command.

What about unsubscribe from all channels?

You can use just simply run UNSUBSCRIBE without any channel name and client will be unsubscribed from all channels.

What if a client wants to unsubscribe channels based on a patterns e.g. unsubscribed from all news channels?

You can use the following command to do that;

PUNSUBSCRIBE <pattern>
i.e.

>PUNSUBSCRIBE news*

Please note, when no patterns are specified, the client is unsubscribed from all the previously subscribed patterns. In this case, a message for every unsubscribed pattern will be sent to the client.

Happy Pub/Subbing!!!


# 160. Redis Database Design - A Chat Application
smembers users
sismember users user1
sadd users user1
srem users user1

rpush msg:room:lobby "user1:testmessage"
rpush msg:room:lobby "user2:testmessage"
lrange msg:room:lobby 0 -1
rpush msg:direct:user1:user2 "user1: test message"
rpush msg:direct:user2:user1 "user2: test message"
lrange msg:direct:user1:user2 0 -1

smembers room:lobby
smembers room:admin
smember room:special
sadd room:lobby user1 user2
smembers room:lobby
smembers room:admin
subscribe room:lobby

ctrl + c

sadd room:lobby user1

unsubscribe room:lobby

srem room:lobby user1
smembers room:lobby
# 89. Using HSET, HGET and HGETALL for hashes
hset user fname "John" lname "Doe"
hget user fname
hget user lname
hget user lname1
hgetall user
hset user age 40
hget user age
hgetall user
hset user age 35
hget user age
hgetall user


# 91. Get multiple fields values via HMGET
hgetall user
rename user user:101
hgetall user:101
hmget user:101 fname lname
hmget user:101 fname lname lname1
hmget user:101 age fname lname


# 93. Find length of a hash via HLEN
hlen user:101
hgetall user:101


# 95. Delete fields via HDEL
hset user:101 f1 v1 f2 v2
hgetall user:101
hdel user:101 f2
hgetall user:101
hdel user:101 f1 f2
hgetall user:101


# 97. Use HEXISTS to check if a field exist
hexists user:101 fname
hexists user:101 fname1
hmget user:101 fname lname
hmget user:101 fname lname1


# 99. Get all fields name via HKEYS
hgetall user:101
hkeys user:101
hkeys user:102


# 101. Get all fields values via HVALS
hgetall user:101
hvals user:101


# 103. Counting via HINCRBY and HINCRBYFLOAT
hgetall user:101
hkeys user:101
hset user:101 score 10
hgetall user:101
hincrby user:101 score 10
hgetall user:101
hincrby user:101 score -10
hgetall user:101

hset user:101 commission 0.25
hgetall user:101
hincrbyfloat user:101 commission 1.2
hgetall user:101
hincrbyfloat user:101 commission -1.2
hgetall user:101


# 105. Using HSETNX to add a new field
hsetnx user:101 fname "John2"
hgetall user:101
hsetnx user:101 f1 v1
hgetall user:101


# 107. Get random fields via HRANDFIELD
hkeys user:101
# 随机返回1个key
hrandfield user:101
hrandfield user:101 1
# 随机返回2个key
hrandfield user:101 2
# 不保证返回key的唯一性，即可能返回重复的key
hrandfield user:101 -2
hrandfield user:101 -2 withvalues
hrandfield user:101 20 withvalues
hkeys user:101


# 109. Use Cases - Hashes
Redis Hashes are maps between string fields and string values. They are the go-to data type if you need to essentially create a container of unique fields and their values to represent objects.

User Profiles: Redis Hash data structures can be used to store application objects like Users information and more. Many web applications use Redis Hashes for their user profiles, as they can use a single hash for all the user fields, such as name, surname, email, password, etc.e.g. you can use

HSET user:101 name "Joe" age 30 country "USA"

User Posts: Some of the popular social platforms like instagram uses Redis Hashes for various purposes e.g.

To map all the archived user photos or posts back belong to  a single user. The Redis Hashes hashing mechanism allows them to look up and return values very fast, fit the data needed in memory, and leverage data persistence in the event one of their servers dies.

Storing Multi-Tenant Metrics: Multi-tenant metrics can utilize Redis hashes to store critical informations e.g They can use hash data structures to record and store their product and sales metrics in a way that guarantees solid separation between each tenant, as hashes can be encoded efficiently in a very small memory space.

You should use Redis Hashes whenever possible, as you can use a small Redis instance to store millions of objects.


# 110. Quick Reference - Hashes
hashes are useful for representing objects

Hashes contain one or more fields.

HSET, HSETNX, HMSET

Set field value, Set field value if field does not exist, Set multiple field values

HGET, HMGET

Get field value, Get multiple field values

HLEN, HKEYS, HVALS, HGETALL

Get Number of fields, Get all field keys, Get all field values, Get all fields and values

HEXISTS, HDEL

Check field exists, delete field

HINCRBY, HINCRBYFLOAT

Increment field integer value, Increment field float value
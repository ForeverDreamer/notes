# 查看git版本
git --version

# How Git Works
# 2 Git Is Not What You Think
# 初始化仓库
git init

# 查看仓库状态
git status

# stage文件或目录
git add menu.txt
git add recipes/
git status

# 提交stage里的文件和目录，写入object database
git commit -m 'First commit!'

# 查看提交历史
git log

# 查看单个object信息, -t: 类型，-p: 内容
git cat-file -t f9ec34ca882ea5785f1d9debaf0386904dce34ce
git cat-file -p f9ec34ca882ea5785f1d9debaf0386904dce34ce

# 计算objects数量
git count-objects

# 3 Branches Demystified
# 查看分支
git branch

# 重命名分支
git branch -m <name>

# 创建<ideas>分支
git branch ideas

# 切换到<ideas>分支
git switch ideas  # git checkout ideas(旧版本命令)

# 当前位于<master>分支，合并<ideas>分支
git merge ideas
# 当前位于<ideas>分支，合并<master>分支
git switch ideas
git merge master

# detached head
git checkout c0e58bf25cae84d1cf506b12160100955fa754ac
# 通过创建新分支保留detached head 的commit
git checkout 901315a
git branch nogood

# 3 Rebasing Made Simple
# 在ideas分支执行，复制ideas的commits，链接到main上，移动ideas分支到最前面
git rebase main
# 在main分支执行，复制main的commits，链接到ideas上，移动main分支到最前面
git rebase ideas

# 给当前commit贴标签
# -a: annotated, -m: message
git tag release_1 -a -m "First release, still unstable"
# 普通标签
git tag dinner
# 查看标签
git tag
# 切换到标签
git checkout release_1


# 4 Distributed Version Control
# 克隆仓库
git clone https://github.com/nusco/how-git-works

# 查看远程和本地的所有分支
git branch --all

# 查看所有dev指向的commit
git show-ref dev
git show-ref master
git show-ref main


# 同步到远程仓库
git push
# -f: force, 覆盖远程仓库中冲突的commit
git push -f

# git fetch and git merge
git pull



# Master Git
# 2 The Four Areas: Introduction
# 比较Working Area和Index
git diff
# 比较Index和Repository
git diff --cached


# 3 The Four Areas: Basic Workflow
# 比较ideas和main两个分支
git diff ideas main
# --cached: 从index删除, git add的逆操作, -f: 从Working Area和Index同时删除
git rm --cached file_name
# 移动或重命名，同时更新Working Area和Index, 一般不用，用git add, 让git自动识别
git mv menu.md menu.txt


# 4 The Four Areas: Git Reset
# 移动当前分支到指定commit，丢弃前边的commits, 从Repository复制数据到: 1.Index(--mixed)，2.Index和Working Area(--hard)，3.不复制数据(--soft)
git reset commit_id # 默认--mixed
git reset --mixed commit_id
git reset --hard commit_id
git reset --soft commit_id
# 从Repository复制数据到Index，等同于git rm --cached
git reset HEAD
# 从Repository复制数据到Index和Working Area
git reset --hard HEAD


# 5 The Four Areas: Advanced Tools
# Stash类似于剪贴板(clipboard)
# 复制Working Area和Index的数据到Stash，然后checkout当前commit
git stash --include-untracked
# 查看stash
git stash list
# 复制Stash的首条数据到Working Area和Index
git stash apply
# 清空Stash
git stash clear

# Working with Paths
# 从Repository复制menu.txt到Index，等同于git rm --cached menu.txt
git reset HEAD menu.txt
# 从Repository复制menu.txt到Index和Working Area
git checkout HEAD menu.txt

# Committing Parts of a File
# 使用git add|checkout|stash|reset|... --patch处理部分文件(hunk)
git add --patch menu.txt

# 从Repository复制menu.txt到Index，等同于git rm --cached menu.txt
git restore --staged menu.txt


# 6 History: Exploring the Past
git log --graph --decorate --oneline
# 查看commit的详细信息
git show commit_id
git show branch_name
git show HEAD
# parent commit
git show HEAD^
# parent of parent commit
git show HEAD^^
# HEAD之前第5个commit
git show HEAD~5
# HEAD之前第2个commit的第二个parent commit
git show HEAD~2^2
# 1个月之前HEAD的位置
git show HEAD@{"1 month ago"}

# shows where the lines in a file are coming from
git blame recipes/apple_pie.txt
# 对比commits
git diff HEAD HEAD~2
# 对比branches
git diff nogood master

git help log
# commits文本变更详情
git log --patch
# 根据commit评论过滤，评论包含"apples"的commit
git log --grep apples --oneline
# 变更文本包含"apples"的commit
git log -Gapples --patch
# git grep用法
git help grep
# 查看最近3条commits
git log -3 --oneline
# 查看第5条至parent的commits
git log HEAD~5..HEAD^ --oneline
# nogood至master的commits
git log nogood..master --oneline


# 6 History: Fixing Mistakes
# 与最近的一个commit合并
git commit --amend

# 互动式rebase，从origin/master后一个commit开始往上(从远期到近期)编辑
# https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History
git rebase -i origin/master

# 查看变更日志
git reflog HEAD
git reflog refs/heads/master
# 查看commit，找到无法追踪的commit，可以创建分支或贴上标签防止被垃圾回收
git show HEAD@{15}


# filter-branch是旧命令，会逐步弃用，建议filter-repo
git help filter-repo
# 从所有commits中删除menu.txt
git filter-repo --path menu.txt --invert-paths

# write a new commit with new data that is the opposite of existing data
git revert 5720fdf
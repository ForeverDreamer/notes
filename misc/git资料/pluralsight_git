# 查看git版本
git --version

# How Git Works
# 2 Git Is Not What You Think
# 初始化仓库
git init

# 查看仓库状态
git status

# stage文件或目录
git add menu.txt
git add recipes/
git status

# 提交stage里的文件和目录，写入object database
git commit -m 'First commit!'

# 查看提交历史
git log

# 查看单个object信息, -t: 类型，-p: 内容
git cat-file -t f9ec34ca882ea5785f1d9debaf0386904dce34ce
git cat-file -p f9ec34ca882ea5785f1d9debaf0386904dce34ce

# 计算objects数量
git count-objects

# 3 Branches Demystified
# 查看分支
git branch

# 重命名分支
git branch -m <name>

# 创建<ideas>分支
git branch ideas

# 切换到<ideas>分支
git switch ideas  # git checkout ideas(旧版本命令)

# 当前位于<master>分支，合并<ideas>分支
git merge ideas
# 当前位于<ideas>分支，合并<master>分支
git switch ideas
git merge master

# detached head
git checkout c0e58bf25cae84d1cf506b12160100955fa754ac
# 通过创建新分支保留detached head 的commit
git checkout 901315a
git branch nogood

# 3 Rebasing Made Simple
# 在ideas分支执行，复制ideas的commits，链接到main上，移动ideas分支到最前面
git rebase main
# 在main分支执行，复制main的commits，链接到ideas上，移动main分支到最前面
git rebase ideas

# 给当前commit贴标签
# -a: annotated, -m: message
git tag release_1 -a -m "First release, still unstable"
# 普通标签
git tag dinner
# 查看标签
git tag
# 切换到标签
git checkout release_1


# 4 Distributed Version Control
# 克隆仓库
git clone https://github.com/nusco/how-git-works

# 查看远程和本地的所有分支
git branch --all

# 查看所有dev指向的commit
git show-ref dev
git show-ref master
git show-ref main


# 同步到远程仓库
git push
# -f: force, 覆盖远程仓库中冲突的commit
git push -f

# git fetch and git merge
git pull



# Master Git
# 2 The Four Areas: Introduction
# 比较Working Area和Index
git diff
# 比较Index和Repository
git diff --cached


# 3 The Four Areas: Basic Workflow
# 比较ideas和main两个分支
git diff ideas main
# --cached: 从index删除, git add的逆操作, -f: 从Working Area和Index同时删除
git rm --cached file_name
# 移动或重命名，同时更新Working Area和Index, 一般不用，用git add, 让git自动识别
git mv menu.md menu.txt


# 3 The Four Areas: Git Reset
# 移动当前分支到指定commit，丢弃前边的commits, 从Repository复制数据到: 1.Index(--mixed)，2.Index和Working Area(--hard)，3.不复制数据(--soft)
git reset commit_id # 默认--mixed
git reset --mixed commit_id
git reset --hard commit_id
git reset --soft commit_id
# 从Repository复制数据到Index，等同于git rm --cached
git reset HEAD
# 从Repository复制数据到Index和Working Area
git reset --hard HEAD
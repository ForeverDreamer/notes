在学习中可能需要用到谷歌搜索，或者安装go语言相关包，需要的时候就配置下，仅用于学习。

以下是WSL2内使用windows的v2ray代理配置方式参考步骤：

1.windows v2ray客户端开启允许来自局域网的连接。

2.wsl中关闭自动更新dns nameserver /etc/wsl.conf 文件中设置为false。

[network]
generateResolvConf = false
然后/etc/resolv.conf中nameserver替换成8.8.8.8或者其他可用的dns服务器。

（这里做这个的原因是默认的nameserver是宿主机windows10的IP，会通过windows10机器去连接真正的nameserver，但是使用了v2ray等软件后导致该套路不可用，wsl2无法将vpn当成nameserver）

3.在~/.bashrc中添加如下内容 [1]

# add for proxy
export hostip=$(ip route | grep default | awk '{print $3}')
export hostport=10808
alias proxy='
    export ALL_PROXY="socks5://${hostip}:${hostport}";
    export HTTPS_PROXY=$ALL_PROXY;
    export HTTP_PROXY=$ALL_PROXY;
    git config --global proxy.https $ALL_PROXY;
    git config --global proxy.http $ALL_PROXY;
    yarn config set proxy $ALL_PROXY
    yarn config set https-proxy $ALL_PROXY
    echo "代理开启";
    echo "ALL_PROXY: $ALL_PROXY";
    echo "HTTPS_PROXY: $HTTPS_PROXY";
    echo "HTTP_PROXY: $HTTP_PROXY";
    echo "git proxy:";
    git config --global -l;
    echo "yarn proxy:";
    yarn config get proxy;
    yarn config get https-proxy;
'
alias unproxy='
    unset ALL_PROXY;
    unset HTTPS_PROXY;
    unset HTTP_PROXY;
    git config --global --unset proxy.http;
    git config --global --unset proxy.https;
    yarn config unset proxy;
    yarn config unset https-proxy;
    echo "代理关闭";
    echo "ALL_PROXY: $ALL_PROXY";
    echo "HTTPS_PROXY: $HTTPS_PROXY";
    echo "HTTP_PROXY: $HTTP_PROXY";
    echo "git proxy:";
    git config --global -l;
    echo "yarn proxy:";
    yarn config get proxy;
    yarn config get https-proxy;
'

其中hostip取到了宿主机windows在wsl2中映射的IP，端口是自己v2ray的客户端端口，然后 生成了配置代理的函数 proxy。

4.输入 proxy 导出代理环境变量

proxy
5.通过curl命令验证

curl https://google.com.hk
(curl命令会自动读取环境变量 HTTP_PROXY和HTTPS_PROXY的内容）

6.如果验证不可用，清排查如下内容：

ping google.com.hk 测试是否解析出IP（解析出IP之后最后全部丢包没关系，只要解析出域名对应的IP），否则需要验证步骤2配置正确性。
v2rayVPN自身可用性，在windows terminal下运行curl https://google.com.hk 进行验证。
通过echo $HTTP_PROXY等命令查看是否环境变量已经正确导出
确认自己的v2ray客户端端口是否是10808，请改成自己的端口
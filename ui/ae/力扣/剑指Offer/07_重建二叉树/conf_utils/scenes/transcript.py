scenes = {
    's1': [
        [
            '大家好，我是IT学长，今天跟大家分享的是力扣 "剑指 Offer 07. 重建二叉树"',
            '题目链接已打在屏幕下方，有兴趣的同学可以去力扣官网提交代码测试运行结果',
            '我们看一下题目描述'
        ],
    ],
    's2': [
        [
            '输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点',
            '假设输入的前序遍历和中序遍历的结果中都不含重复的数字',
        ],
        [
            '题目举了两个例子帮助理解题意',
            '示例 1',
            '前序遍历的结果是[3,9,20,15,7]，中序遍历的结果是[9,3,15,20,7]',
            '重建出来的二叉树为[3,9,20,null,null,15,7]',
            '画出来是这个样子的',
        ],
        [
            '示例 2',
            '如果前序遍历的结果是[-1]，中序遍历的结果是[-1]',
            '重建出来的二叉树为[-1]',
            '此种为空树情况',
        ],
        [
            '限制条件：0 <= 节点个数 <= 5000',
            '我们实现算法时需要根据限制条件考虑时间复杂度和空间复杂度问题',
            '否则即使本地调试通过，提交到力扣依然会因为复杂度太高而无法通过全部测试用例',
        ]
    ],
    's3': [
        [
            '解题之前我们必须要知道两种遍历方式的含义',
            '前序遍历任何一个节点，都是按照根节点->左子树->右子树的顺序进行',
            '过程用动画演示出来是这样的',
            '遍历结果按照[根节点|左子树|右子树]排序',
            '因此前序遍历结果的第一个元素即为树的根节点',
        ],
    ],
}
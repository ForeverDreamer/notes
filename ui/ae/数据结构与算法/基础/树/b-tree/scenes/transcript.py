# 开场白/过渡语/结束语，录制成单独的音频文件，方便重复使用
scenes = {
    's0': [
        [
            # 开场白start
            # 'Write the code, change the world!',
            # '大家好，我是IT学长',
            # 开场白end
            # '今天跟大家分享的是B-Tree',
            'B-tree是一种特殊类型的自平衡搜索树',
            '其中每个节点可以包含多个键，并且可以有两个以上的子节点',
            '它是二叉搜索树的一般形式',
        ],
        [
            '为什么需要B-Tree这种数据结构',
            '主存储设备即内存的成本较高，容量很有限',
            '绝大部分的数据必须存放在硬盘等辅助存储设备上',
            '硬盘的容量虽然很大，但访问速度比内存慢很多',
            '所以需要利用高效的数据结构来最大限度减少对硬盘的访问次数',
            '达到提升数据访问速度的目的',
            '其他数据结构如二叉搜索树、avl树、红黑树等只能在一个节点中存储一个键',
            '如果想要存储大量的键，这类树的高度就会变得非常大，访问时间也会大大增加',
            '而B-Tree可以在单个节点中存储许多键，还能拥有多个子节点',
            '从而极大地降低了树的高度，让数据的访问速度更快'
        ],
        [
            'm阶B-Tree包含以下属性',
            '1.所有节点的键都按照递增顺序存储',
            '2.每个节点都有一个布尔值node.leaf，用于标记当前节点是否为叶节点',
            '3.除根节点和叶节点之外的节点叫内部节点',
            '内部节点最多包含n-1个键',
            '内部节点至少包含m/2个子节点，最多包含m个子节点'
            '4.根节点至少包含2个子节点并且至少包含1个键',
            '5.所有的叶节点都位于同一层级，即具有相同的深度（树的高度）'
        ]
    ],
}